package cl.tenpo.learning.reactive.tasks.task2.application;

import cl.tenpo.learning.reactive.tasks.task2.application.port.PercentageService;
import cl.tenpo.learning.reactive.tasks.task2.infrastructure.cache.PercentageCacheService;
import cl.tenpo.learning.reactive.tasks.task2.infrastructure.client.ExternalApiClient;
import cl.tenpo.learning.reactive.tasks.task2.infrastructure.exception.ServiceUnavailableException;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import reactor.core.publisher.Mono;

import java.math.BigDecimal;

/**
 * Servicio para obtener el porcentaje desde una API externa con fallback a cachÃ©
 * Requisito: Se debe verificar siempre primero el servicio externo
 */
@Service
@Slf4j
@RequiredArgsConstructor
public class ExternalPercentageService implements PercentageService {

    private final ExternalApiClient externalApiClient;
    private final PercentageCacheService cacheService;

    @Override
    public Mono<BigDecimal> getPercentage() {
        log.info("ðŸš€ðŸš€ðŸš€ GETPERCENTAGE() CALLED - INTENTANDO OBTENER DEL SERVICIO EXTERNO PRIMERO ðŸš€ðŸš€ðŸš€");
        
        return externalApiClient.fetchPercentage()
                .flatMap(percentage -> {
                    log.info("âœ…âœ…âœ… SERVICIO EXTERNO EXITOSO - ALMACENANDO EN CACHE: {} âœ…âœ…âœ…", percentage);
                    return cacheService.cachePercentage(percentage)
                            .thenReturn(percentage);
                })
                .onErrorResume(error -> {
                    log.error("ðŸ”´ðŸ”´ðŸ”´ ERROR EN SERVICIO EXTERNO: {} - INTENTANDO USAR VALOR EN CACHÃ‰ ðŸ”´ðŸ”´ðŸ”´", error.getMessage());
                    return cacheService.getCachedPercentage()
                            .doOnNext(cached -> log.info("âœ…âœ…âœ… USANDO VALOR EN CACHÃ‰ COMO FALLBACK: {} âœ…âœ…âœ…", cached))
                            .switchIfEmpty(Mono.defer(() -> {
                                log.error("ðŸ’¥ðŸ’¥ðŸ’¥ NO HAY VALOR EN CACHÃ‰ DISPONIBLE - RESPONDIENDO CON ERROR ðŸ’¥ðŸ’¥ðŸ’¥");
                                return Mono.error(new ServiceUnavailableException("Servicio externo no disponible y no hay valor en cachÃ©"));
                            }));
                })
                .doOnSubscribe(s -> log.info("ðŸ””ðŸ””ðŸ”” PERCENTAGE SERVICE SUBSCRIBED ðŸ””ðŸ””ðŸ””"))
                .doOnSuccess(val -> log.info("ðŸŽ‰ðŸŽ‰ðŸŽ‰ PERCENTAGE SERVICE SUCCESS: {} ðŸŽ‰ðŸŽ‰ðŸŽ‰", val))
                .doOnError(err -> log.error("ðŸ’¥ðŸ’¥ðŸ’¥ PERCENTAGE SERVICE ERROR: {} ðŸ’¥ðŸ’¥ðŸ’¥", err.getMessage()));
    }
}
