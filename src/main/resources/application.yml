server:
  port: ${SERVER_PORT:8083}

spring:
  application:
    name: reactive-learning
  main:
    allow-bean-definition-overriding: true
  profiles:
    active: local
  webflux:
    base-path: /learning-reactive
  data:
    mongodb:
      uri: mongodb://${MONGO_USER}:${MONGO_PASS}@${MONGO_HOST}/${MONGO_DB_NAME}?authSource=admin
      database: ${MONGO_DB_NAME}
      uuid-representation: standard
      auto-index-creation: true
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
  r2dbc:
    url: r2dbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB_NAME}?connectTimeout=30&socketTimeout=30
    username: ${POSTGRES_USER}
    password: ${POSTGRES_PASS}
  kafka:
    bootstrap-servers: ${KAFKA_HOST:localhost:9092}
    properties:
      security:
        protocol: ${KAFKA_SECURITY_PROTOCOL}
      sasl:
        mechanism: PLAIN
        jaas:
          config: org.apache.kafka.common.security.plain.PlainLoginModule required username="${KAFKA_API_CLIENT}" password="${KAFKA_API_SECRET}";
    consumer:
      group-id: reactive-learning-group
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      auto-offset-reset: earliest
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring:
          json:
            add:
              type:
                headers: false
  jackson:
    property-naming-strategy: SNAKE_CASE

app:
  # Configuración de endpoints de API
  api:
    endpoints:
      calculation: /calculation
      history: /history
      users: /users
      ping: /ping
    external:
      base-url: http://localhost:8083/learning-reactive
      percentage-path: /external-api/percentage
    base-paths:
      functional: /learning-reactive/functional
      alternative: /learning-reactive/v2
    retry:
      max-attempts: 2
      initial-backoff: PT0.5S
      max-backoff: PT2S
      backoff-multiplier: 1.5
    pagination:
      default-page: 0
      default-page-size: 10
      max-page-size: 100

  # Configuración de timeouts
  timeouts:
    external-api: PT2S
    cache-operation: PT5S
    database-operation: PT10S
    
  # Configuración de Paginación
  pagination:
    default-page: 0
    default-page-size: 10
    max-page-size: 100
    
  # Configuración de Retry
  retry:
    max-attempts: 3
    initial-backoff: PT0.5S
    max-backoff: PT2S
    backoff-multiplier: 1.5
    
  # Configuración de Schedulers
  schedulers:
    database:
      core-pool-size: 10
      max-pool-size: 100
      ttl-seconds: 60
    external-api:
      core-pool-size: 5
      max-pool-size: 50
      ttl-seconds: 30
    cache:
      parallelism: 4
    logging:
      core-pool-size: 2
      max-pool-size: 10
      ttl-seconds: 30

  # Configuración de Kafka
  kafka:
    topics:
      retry-exhausted: CR_RETRY_EXHAUSTED

  # Configuración de filtros
  filters:
    logging:
      excluded-paths:
        - "/actuator"
        - "/swagger"
        - "/v3/api-docs"

  # Configuración de testing para probar que se punbliqu
  testing:
    force-external-api-error: false  # Flag para simular error en la API externa

# Configuración de logging
logging:
  level:
    cl.tenpo.learning.reactive: DEBUG
    org.springframework.web.reactive: DEBUG
    reactor.netty: INFO
    org.springframework.data.mongodb.core.ReactiveMongoTemplate: DEBUG
    cl.tenpo.learning.reactive.tasks.task2.infrastructure.retry: TRACE
    cl.tenpo.learning.reactive.tasks.task2.infrastructure.event: TRACE
    cl.tenpo.learning.reactive.tasks.task2.application: TRACE
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%logger{36}] - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%logger{36}] - %msg%n"

# Configuración de actuator
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true

#---
## Configuración específica para perfil local
#spring:
#  config:
#    activate:
#      on-profile: local
#  data:
#    mongodb:
#      host: localhost
#      port: 27017
#      database: learning_reactive_mongo
#      username: mongodb
#      password: mongodb
#      authentication-database: admin
#    redis:
#      host: localhost
#      port: 6379
#  r2dbc:
#    url: r2dbc:postgresql://localhost:5432/learning_reactive_r2dbc?currentSchema=public
#    username: postgresql
#    password: postgresql
#    pool:
#      enabled: true
#      initial-size: 5
#      max-size: 10
#      max-idle-time: 30m
#  kafka:
#    bootstrap-servers: localhost:9092
#    properties:
#      security:
#        protocol: PLAINTEXT
